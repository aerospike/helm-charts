{{- if and .Values.authenticator.enabled .Values.authenticator.config.auth.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.authenticator.name }}-secret
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "aerospike-enterprise-backup.labels" (merge (dict "component" .Values.authenticator) .) | nindent 4 }}
type: Opaque
data:
  SECURITY_JWT_SERVICE_USER: {{ .Values.authenticator.config.auth.username | b64enc }}
  SECURITY_JWT_SERVICE_PASSWORD: {{ .Values.authenticator.config.auth.password | b64enc }}
{{- end }}


{{- if and .Values.restbackend.enabled .Values.restbackend.config.auth.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.restbackend.name }}-secret
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "aerospike-enterprise-backup.labels" (merge (dict "component" .Values.restbackend) .) | nindent 4 }}
type: Opaque
data:
  SECURITY_JWT_SERVICE_USER: {{ .Values.restbackend.config.auth.username | b64enc }}
  SECURITY_JWT_SERVICE_PASSWORD: {{ .Values.restbackend.config.auth.password | b64enc }}
{{- end }}

{{- if and (.Values.storageprovider.enabled) ( and .Values.storageprovider.config.accessKey .Values.storageprovider.config.secretKey) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.storageprovider.name }}-secret
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "aerospike-enterprise-backup.labels" (merge (dict "component" .Values.storageprovider) .) | nindent 4 }}
type: Opaque
data:
  AMAZON_S3_ACCESSKEY: {{ .Values.storageprovider.config.accessKey | b64enc }}
  AMAZON_S3_SECRETKEY: {{ .Values.storageprovider.config.secretKey | b64enc }}
{{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.backupcluster.name }}-secret
  namespace: {{ $.Release.Namespace }}
  labels:
   {{- include "aerospike-enterprise-backup.labels" (merge (dict "component" .Values.backupcluster) .) | nindent 4 }}
type: Opaque
data:
  pswd.txt: {{ .Values.backupcluster.auth.password | b64enc }}

{{- if .Values.aws.ecrtokenissuer.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: "ecr-token-issuer-secret"
  namespace: {{ $.Release.Namespace }}
  labels:
    helm.sh/chart: {{ printf "%s-%s" $.Chart.Name $.Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" | quote }}
    app.kubernetes.io/instance: {{ $.Release.Name | quote }}
    app.kubernetes.io/version: {{ $.Chart.AppVersion | trunc 63 | trimSuffix "-" | quote }}
    app.kubernetes.io/managed-by: {{ $.Release.Service | quote }}
    app.kubernetes.io/part-of: {{ $.Chart.Name | trunc 63 | trimSuffix "-" | quote }}
  annotations:
    "helm.sh/hook": pre-install, post-delete
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
stringData:
  AWS_SECRET_ACCESS_KEY: {{ .Values.aws.ecrtokenissuer.credentials.awsSecretAccessKey | quote }}
  AWS_ACCESS_KEY_ID: {{ .Values.aws.ecrtokenissuer.credentials.awsAccessKeyId | quote }}
  AWS_ACCOUNT: {{ .Values.aws.ecrtokenissuer.credentials.awsAccountId | quote }}
{{- end }}